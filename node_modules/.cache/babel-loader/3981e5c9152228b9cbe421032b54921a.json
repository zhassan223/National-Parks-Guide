{"ast":null,"code":"var _jsxFileName = \"/Users/ziyadhassan/Documents/GitHub/national-park-website/src/components/Webcam.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport Activities from \"./Activities\";\nimport { Routes, Route, useParams } from 'react-router-dom';\nimport React, { useEffect, useState } from \"react\";\nimport { Link, useHistory } from 'react-router-dom';\nimport Header3 from \"./Header3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst useFetch = url => {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true); // Similar to componentDidMount and componentDidUpdate:\n\n  useEffect(async () => {\n    const response = await fetch(url);\n    const data = await response.json();\n    const item = data.data;\n    setData(item);\n    setLoading(false);\n  }, []);\n  return {\n    data,\n    loading\n  };\n};\n\n_s(useFetch, \"Zn4cs3026OJRBhxLd0Oqj+bUOXY=\");\n\nfunction Webcam(props) {\n  _s2();\n\n  let params = useParams();\n  const url = \"https://developer.nps.gov/api/v1/webcams?limit=50&q=\" + params.fname + \"&api_key=mWVRZYNNsVJXtdRrlIOnA6v4nFogwFI0MKHa9WaV\";\n  const {\n    data,\n    loading\n  } = useFetch(url);\n  /* data is an array of json objects  */\n\n  console.log(data);\n  /* data is an array of json objects  */\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 16\n    }, this);\n  }\n\n  if (!data) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"you don't have data man\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 16\n    }, this);\n  }\n\n  const count = 0;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: data.map((cam, idx) => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [console.log(cam.images), cam.images.map((img, idx) => /*#__PURE__*/_jsxDEV(\"img\", {\n        src: img.url\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 25\n      }, this))]\n    }, void 0, true))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(Webcam, \"bpyKVaI2JKJUvPL061lBMP7FIo4=\", false, function () {\n  return [useParams, useFetch];\n});\n\n_c = Webcam;\nexport default Webcam;\n\nvar _c;\n\n$RefreshReg$(_c, \"Webcam\");","map":{"version":3,"sources":["/Users/ziyadhassan/Documents/GitHub/national-park-website/src/components/Webcam.js"],"names":["Activities","Routes","Route","useParams","React","useEffect","useState","Link","useHistory","Header3","useFetch","url","data","setData","loading","setLoading","response","fetch","json","item","Webcam","props","params","fname","console","log","count","map","cam","idx","images","img"],"mappings":";;;;AAAA,OAAOA,UAAP,MAAuB,cAAvB;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,SAAxB,QAAyC,kBAAzC;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,EAAeC,UAAf,QAAiC,kBAAjC;AAEA,OAAOC,OAAP,MAAoB,WAApB;;;;AACA,MAAMC,QAAQ,GAAGC,GAAG,IAAI;AAAA;;AACpB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,IAAD,CAAtC,CAFoB,CAIpB;;AACAD,EAAAA,SAAS,CAAC,YAAY;AAClB,UAAMW,QAAQ,GAAG,MAAMC,KAAK,CAACN,GAAD,CAA5B;AACA,UAAMC,IAAI,GAAG,MAAMI,QAAQ,CAACE,IAAT,EAAnB;AACA,UAAMC,IAAI,GAAGP,IAAI,CAACA,IAAlB;AACAC,IAAAA,OAAO,CAACM,IAAD,CAAP;AACAJ,IAAAA,UAAU,CAAC,KAAD,CAAV;AACH,GANQ,EAMN,EANM,CAAT;AAQA,SAAO;AAAEH,IAAAA,IAAF;AAAQE,IAAAA;AAAR,GAAP;AACH,CAdD;;GAAMJ,Q;;AAiBN,SAASU,MAAT,CAAgBC,KAAhB,EAAuB;AAAA;;AAInB,MAAIC,MAAM,GAAGnB,SAAS,EAAtB;AACA,QAAMQ,GAAG,GAAG,yDAAyDW,MAAM,CAACC,KAAhE,GAAwE,mDAApF;AAKA,QAAM;AAAEX,IAAAA,IAAF;AAAQE,IAAAA;AAAR,MAAoBJ,QAAQ,CAACC,GAAD,CAAlC;AAMA;;AAEAa,EAAAA,OAAO,CAACC,GAAR,CAAYb,IAAZ;AACA;;AAEA,MAAIE,OAAJ,EAAa;AACT,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAED,MAAI,CAACF,IAAL,EAAW;AACP,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AAEH;;AACD,QAAMc,KAAK,GAAG,CAAd;AACA,sBAEI;AAAA,cAEKd,IAAI,CAACe,GAAL,CAAS,CAACC,GAAD,EAAMC,GAAN,kBACN;AAAA,iBACKL,OAAO,CAACC,GAAR,CAAYG,GAAG,CAACE,MAAhB,CADL,EAEKF,GAAG,CAACE,MAAJ,CAAWH,GAAX,CAAe,CAACI,GAAD,EAAMF,GAAN,kBACZ;AAAK,QAAA,GAAG,EAAEE,GAAG,CAACpB;AAAd;AAAA;AAAA;AAAA;AAAA,cADH,CAFL;AAAA,oBADH;AAFL;AAAA;AAAA;AAAA;AAAA,UAFJ;AAgBH;;IA9CQS,M;UAIQjB,S,EAMaO,Q;;;KAVrBU,M;AAgDT,eAAeA,MAAf","sourcesContent":["import Activities from \"./Activities\";\nimport { Routes, Route, useParams } from 'react-router-dom';\nimport React, { useEffect, useState } from \"react\";\nimport { Link, useHistory } from 'react-router-dom';\n\nimport Header3 from \"./Header3\";\nconst useFetch = url => {\n    const [data, setData] = useState(null);\n    const [loading, setLoading] = useState(true);\n\n    // Similar to componentDidMount and componentDidUpdate:\n    useEffect(async () => {\n        const response = await fetch(url);\n        const data = await response.json();\n        const item = data.data\n        setData(item);\n        setLoading(false);\n    }, []);\n\n    return { data, loading };\n};\n\n\nfunction Webcam(props) {\n\n\n\n    let params = useParams()\n    const url = \"https://developer.nps.gov/api/v1/webcams?limit=50&q=\" + params.fname + \"&api_key=mWVRZYNNsVJXtdRrlIOnA6v4nFogwFI0MKHa9WaV\";\n\n\n\n\n    const { data, loading } = useFetch(url);\n\n\n\n\n\n    /* data is an array of json objects  */\n\n    console.log(data)\n    /* data is an array of json objects  */\n\n    if (loading) {\n        return <div>loading...</div>;\n    }\n\n    if (!data) {\n        return <div>you don't have data man\n        </div>;\n    }\n    const count = 0;\n    return (\n\n        <div>\n\n            {data.map((cam, idx) => (\n                <>\n                    {console.log(cam.images)}\n                    {cam.images.map((img, idx) => (\n                        <img src={img.url} />\n                    ))}\n                </>\n            ))}\n\n        </div>\n    )\n\n}\n\nexport default Webcam;"]},"metadata":{},"sourceType":"module"}